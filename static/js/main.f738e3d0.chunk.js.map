{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","components/NewCommentForm.tsx","components/CommentsList.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","posts","onSetPost","selectedPostId","useRef","className","map","post","id","title","type","classNames","current","onClick","handleSelectPost","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","json","client","NewCommentForm","postId","onAddNewComment","useState","userName","setUserName","hasUserNameError","setHasUserNameError","userEmail","setUserEmail","hasUserEmailError","setHasUserEmailError","commentText","setCommentText","hasCommentError","setHasCommentError","loading","setLoading","addNewCommentError","setAddNewCommentError","onSubmit","event","preventDefault","name","email","comment","catch","finally","onReset","htmlFor","placeholder","value","onChange","target","handleUserNameChange","handleUserEmailChange","handleCommentChange","CommentsList","comments","commentsDelError","onDeleteComment","href","includes","PostDetails","setComments","showComments","setShowComments","commentsLoadError","setCommentsLoadError","setCommentsDelError","addNewComment","setAddNewComment","useEffect","length","commentId","filter","item","newComment","UserSelector","users","onSetUser","dropdown","setDropdown","selectedUser","setSelectedUser","dropdownSelect","contains","document","addEventListener","removeEventListener","ref","role","user","i","handleSelectUser","App","setUsers","selectedUserId","setSelectedUserId","setPosts","showPosts","setShowPosts","setPost","errorMessage","setErrorMessage","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.f738e3d0.chunk.js","sourcesContent":["import React, { useRef } from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[];\n  onSetPost: (post: Post | null) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({ posts, onSetPost }) => {\n  const selectedPostId = useRef<number | null>(null);\n\n  const handleSelectPost = (post: Post) => {\n    if (selectedPostId.current === post.id) {\n      onSetPost(null);\n      selectedPostId.current = null;\n    } else {\n      onSetPost(post);\n      selectedPostId.current = post.id;\n    }\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <tr data-cy=\"Post\" key={post.id}>\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames(\n                    'button is-link',\n                    { 'is-light': selectedPostId.current !== post.id },\n                  )}\n                  onClick={() => handleSelectPost(post)}\n                >\n                  {selectedPostId.current !== post.id ? 'Open' : 'Close'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { client } from '../utils/fetchClient';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  postId: number;\n  onAddNewComment: (comment: Comment) => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  postId,\n  onAddNewComment,\n}) => {\n  const [userName, setUserName] = useState('');\n  const [hasUserNameError, setHasUserNameError] = useState(false);\n\n  const [userEmail, setUserEmail] = useState('');\n  const [hasUserEmailError, setHasUserEmailError] = useState(false);\n\n  const [commentText, setCommentText] = useState('');\n  const [hasCommentError, setHasCommentError] = useState(false);\n\n  const [loading, setLoading] = useState(false);\n  const [addNewCommentError, setAddNewCommentError] = useState('');\n\n  const handleUserNameChange = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    setUserName(event.target.value);\n    setHasUserNameError(false);\n  };\n\n  const handleUserEmailChange = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    setUserEmail(event.target.value);\n    setHasUserEmailError(false);\n  };\n\n  const handleCommentChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement>,\n  ) => {\n    setCommentText(event.target.value);\n    setHasCommentError(false);\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    setLoading(true);\n\n    setHasUserNameError(!userName);\n    setHasUserEmailError(!userEmail);\n    setHasCommentError(!commentText);\n\n    if (!userName || !userEmail || !commentText) {\n      setLoading(false);\n\n      return;\n    }\n\n    const data = {\n      postId,\n      name: userName,\n      email: userEmail,\n      body: commentText,\n    };\n\n    client.post<Comment>('/comments', data)\n      .then((comment) => {\n        setAddNewCommentError('');\n        setCommentText('');\n\n        onAddNewComment(comment);\n      })\n      .catch(() => setAddNewCommentError(\"Can't add comment. Try again later.\"))\n      .finally(() => setLoading(false));\n  };\n\n  const handleReset = () => {\n    setUserName('');\n    setUserEmail('');\n    setCommentText('');\n    setHasUserNameError(false);\n    setHasUserEmailError(false);\n    setHasCommentError(false);\n    setAddNewCommentError('');\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n      onReset={handleReset}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', { 'is-danger': hasUserNameError })}\n            value={userName}\n            onChange={(event) => handleUserNameChange(event)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {hasUserNameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {hasUserNameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', { 'is-danger': hasUserEmailError })}\n            value={userEmail}\n            onChange={(event) => handleUserEmailChange(event)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {hasUserEmailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {hasUserEmailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', { 'is-danger': hasCommentError })}\n            value={commentText}\n            onChange={(event) => handleCommentChange(event)}\n          />\n        </div>\n\n        {hasCommentError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link', { 'is-loading': loading })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button type=\"reset\" className=\"button is-link is-light\">\n            Clear\n          </button>\n        </div>\n      </div>\n\n      {addNewCommentError && (\n        <div\n          className=\"notification is-danger\"\n          data-cy=\"PostsLoadingError\"\n        >\n          {addNewCommentError}\n        </div>\n      )}\n    </form>\n  );\n};\n","import { Comment } from '../types/Comment';\n\ntype Props = {\n  comments: Comment[];\n  commentsDelError: number[];\n  onDeleteComment: (commentId: number) => void;\n};\n\nexport const CommentsList: React.FC<Props> = ({\n  comments,\n  commentsDelError,\n  onDeleteComment,\n}) => (\n  <>\n    <p className=\"title is-4\">Comments:</p>\n\n    {comments.map(({\n      id,\n      name,\n      email,\n      body,\n    }) => (\n      <article\n        className=\"message is-small\"\n        data-cy=\"Comment\"\n        key={id}\n      >\n        <div className=\"message-header\">\n          <a href={`mailto:${email}`} data-cy=\"CommentAuthor\">\n            {name}\n          </a>\n          <button\n            data-cy=\"CommentDelete\"\n            type=\"button\"\n            className=\"delete is-small\"\n            aria-label=\"delete\"\n            onClick={() => onDeleteComment(id)}\n          >\n            delete button\n          </button>\n        </div>\n\n        <div className=\"message-body\" data-cy=\"CommentBody\">\n          {body}\n        </div>\n\n        {commentsDelError.includes(id) && (\n          <div\n            className=\"notification is-danger\"\n            data-cy=\"PostsLoadingError\"\n          >\n            Can&apos;t delete comment. Try again later.\n          </div>\n        )}\n      </article>\n    ))}\n  </>\n);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { CommentsList } from './CommentsList';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\ntype Props = {\n  post: Post;\n};\n\nexport const PostDetails: React.FC<Props> = ({ post }) => {\n  const { id, title, body } = post;\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [showComments, setShowComments] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [commentsLoadError, setCommentsLoadError] = useState('');\n  const [commentsDelError, setCommentsDelError] = useState<number[]>([]);\n  const [addNewComment, setAddNewComment] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n    setCommentsLoadError('');\n    setShowComments(false);\n    setAddNewComment(false);\n\n    client.get<Comment[]>(`/comments?postId=${id}`)\n      .then(response => {\n        setComments(response);\n        setShowComments(true);\n      })\n      .catch(() => setCommentsLoadError(\"Can't load comments for current post\"))\n      .finally(() => setLoading(false));\n  }, [post]);\n\n  const handleDeleteComment = (commentId: number) => {\n    client.delete(`/comments/${commentId}`)\n      .then(() => {\n        setComments(\n          current => current?.filter(item => item.id !== commentId) || null,\n        );\n        setCommentsDelError([]);\n      })\n      .catch(() => setCommentsDelError(current => [...current, commentId]));\n  };\n\n  const handleAddNewComment = (newComment: Comment) => {\n    setComments(current => (current ? [...current, newComment] : [newComment]));\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${id}: ${title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {body}\n          </p>\n        </div>\n\n        {loading ? (\n          <Loader />\n        ) : (\n          <div className=\"block\">\n            {showComments && (!comments.length ? (\n              <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                No comments yet\n              </p>\n            ) : (\n              <CommentsList\n                comments={comments}\n                commentsDelError={commentsDelError}\n                onDeleteComment={handleDeleteComment}\n              />\n            ))}\n\n            {commentsLoadError ? (\n              <div\n                className=\"notification is-danger\"\n                data-cy=\"PostsLoadingError\"\n              >\n                {commentsLoadError}\n              </div>\n            ) : !addNewComment && (\n              <button\n                data-cy=\"WriteCommentButton\"\n                type=\"button\"\n                className=\"button is-link\"\n                onClick={() => setAddNewComment(true)}\n              >\n                Write a comment\n              </button>\n            )}\n          </div>\n        )}\n\n        {addNewComment && (\n          <NewCommentForm\n            postId={id}\n            onAddNewComment={handleAddNewComment}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useRef, useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[];\n  onSetUser: (userId: number) => void;\n};\n\nexport const UserSelector: React.FC<Props> = ({ users, onSetUser }) => {\n  const [dropdown, setDropdown] = useState(false);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const dropdownSelect = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const onClick = (event: MouseEvent) => {\n      if (dropdownSelect.current\n        && !dropdownSelect.current.contains(event.target as Node)) {\n        setDropdown(false);\n      }\n    };\n\n    document.addEventListener('mousedown', onClick);\n\n    return () => document.removeEventListener('mousedown', onClick);\n  }, []);\n\n  const handleSelectUser = (user: User) => {\n    setSelectedUser(user);\n    onSetUser(user.id);\n    setDropdown(false);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', { 'is-active': dropdown })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setDropdown(current => !current)}\n        >\n          <span>{selectedUser ? selectedUser.name : 'Choose a user'}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div\n        className=\"dropdown-menu\"\n        ref={dropdownSelect}\n        id=\"dropdown-menu\"\n        role=\"menu\"\n      >\n        <div className=\"dropdown-content\">\n          {users.map((user, i) => (\n            <a\n              key={user.id}\n              href={`#user-${i + 1}`}\n              className={classNames(\n                'dropdown-item',\n                {\n                  'is-active': user.id === (\n                    selectedUser ? selectedUser.id : null),\n                },\n              )}\n              onClick={() => handleSelectUser(user)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { client } from './utils/fetchClient';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUserId, setSelectedUserId] = useState<number | null>(null);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [showPosts, setShowPosts] = useState(false);\n  const [post, setPost] = useState<Post | null>(null);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n\n    client.get<User[]>('/users')\n      .then(setUsers)\n      .catch(() => setErrorMessage(\"Can't load list of users\"))\n      .finally(() => setLoading(false));\n  }, []);\n\n  useEffect(() => {\n    if (selectedUserId) {\n      setLoading(true);\n      setShowPosts(false);\n      setPost(null);\n      setErrorMessage('');\n\n      client.get<Post[]>(`/posts?userId=${selectedUserId}`)\n        .then((response) => {\n          setPosts(response);\n          setShowPosts(true);\n        })\n        .catch(() => setErrorMessage(\"Can't load posts\"))\n        .finally(() => setLoading(false));\n    }\n  }, [selectedUserId]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  onSetUser={setSelectedUserId}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {loading && (\n                  <Loader />\n                )}\n\n                {errorMessage ? (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    {errorMessage}\n                  </div>\n                ) : !selectedUserId && !loading && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {showPosts && (!posts.length ? (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                ) : (\n                  <PostsList\n                    posts={posts}\n                    onSetPost={setPost}\n                  />\n                ))}\n              </div>\n            </div>\n          </div>\n\n          {post && (\n            <div\n              data-cy=\"Sidebar\"\n              className={classNames(\n                'tile',\n                'is-parent',\n                'is-8-desktop',\n                'Sidebar',\n                'Sidebar--open',\n              )}\n            >\n              <div className=\"tile is-child box is-success \">\n                <PostDetails post={post} />\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}