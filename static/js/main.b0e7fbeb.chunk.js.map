{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","posts","onSetPost","selectedPostId","useRef","className","map","post","id","title","type","classNames","current","onClick","handleSelectPost","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","json","client","NewCommentForm","onAddNewComment","useState","userName","setUserName","hasUserNameError","setHasUserNameError","userEmail","setUserEmail","hasUserEmailError","setHasUserEmailError","commentText","setCommentText","hasCommentError","setHasCommentError","loading","setLoading","addNewCommentError","setAddNewCommentError","onSubmit","event","preventDefault","postId","name","email","comment","catch","finally","onReset","htmlFor","placeholder","value","onChange","target","handleUserNameChange","handleUserEmailChange","handleCommentChange","PostDetails","comments","setComments","commentsLoadError","setCommentsLoadError","commentsDelError","setCommentsDelError","addNewComment","setAddNewComment","useEffect","length","href","commentId","filter","item","includes","newComment","UserSelector","users","onSetUser","dropdown","setDropdown","dropdownSelect","contains","document","addEventListener","removeEventListener","ref","role","user","i","handleSelectUser","App","setUsers","setUser","setPosts","setPost","errorMessage","setErrorMessage","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.b0e7fbeb.chunk.js","sourcesContent":["import React, { useRef } from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[];\n  onSetPost: (post: Post | null) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({ posts, onSetPost }) => {\n  const selectedPostId = useRef<number | null>(null);\n\n  const handleSelectPost = (post: Post) => {\n    if (selectedPostId.current === post.id) {\n      onSetPost(null);\n      selectedPostId.current = null;\n    } else {\n      onSetPost(post);\n      selectedPostId.current = post.id;\n    }\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <tr data-cy=\"Post\" key={post.id}>\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames(\n                    'button is-link',\n                    { 'is-light': selectedPostId.current !== post.id },\n                  )}\n                  onClick={() => handleSelectPost(post)}\n                >\n                  {selectedPostId.current !== post.id ? 'Open' : 'Close'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { client } from '../utils/fetchClient';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  post: Post;\n  onAddNewComment: (comment: Comment) => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ post, onAddNewComment }) => {\n  const [userName, setUserName] = useState('');\n  const [hasUserNameError, setHasUserNameError] = useState(false);\n\n  const [userEmail, setUserEmail] = useState('');\n  const [hasUserEmailError, setHasUserEmailError] = useState(false);\n\n  const [commentText, setCommentText] = useState('');\n  const [hasCommentError, setHasCommentError] = useState(false);\n\n  const [loading, setLoading] = useState(false);\n  const [addNewCommentError, setAddNewCommentError] = useState('');\n\n  const handleUserNameChange = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    setUserName(event.target.value);\n    setHasUserNameError(false);\n  };\n\n  const handleUserEmailChange = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    setUserEmail(event.target.value);\n    setHasUserEmailError(false);\n  };\n\n  const handleCommentChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement>,\n  ) => {\n    setCommentText(event.target.value);\n    setHasCommentError(false);\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    setLoading(true);\n\n    setHasUserNameError(!userName);\n    setHasUserEmailError(!userEmail);\n    setHasCommentError(!commentText);\n\n    if (!userName || !userEmail || !commentText) {\n      setLoading(false);\n\n      return;\n    }\n\n    const data = {\n      postId: post.id,\n      name: userName,\n      email: userEmail,\n      body: commentText,\n    };\n\n    client.post<Comment>('/comments', data)\n      .then((comment) => {\n        setAddNewCommentError('');\n        setCommentText('');\n\n        onAddNewComment(comment);\n      })\n      .catch(() => setAddNewCommentError(\"Can't add comment. Try again later.\"))\n      .finally(() => setLoading(false));\n  };\n\n  const handleReset = () => {\n    setUserName('');\n    setUserEmail('');\n    setCommentText('');\n    setHasUserNameError(false);\n    setHasUserEmailError(false);\n    setHasCommentError(false);\n    setAddNewCommentError('');\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n      onReset={handleReset}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', { 'is-danger': hasUserNameError })}\n            value={userName}\n            onChange={(event) => handleUserNameChange(event)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {hasUserNameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {hasUserNameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', { 'is-danger': hasUserEmailError })}\n            value={userEmail}\n            onChange={(event) => handleUserEmailChange(event)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {hasUserEmailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {hasUserEmailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', { 'is-danger': hasCommentError })}\n            value={commentText}\n            onChange={(event) => handleCommentChange(event)}\n          />\n        </div>\n\n        {hasCommentError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link', { 'is-loading': loading })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button type=\"reset\" className=\"button is-link is-light\">\n            Clear\n          </button>\n        </div>\n      </div>\n\n      {addNewCommentError && (\n        <div\n          className=\"notification is-danger\"\n          data-cy=\"PostsLoadingError\"\n        >\n          {addNewCommentError}\n        </div>\n      )}\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\ntype Props = {\n  post: Post;\n};\n\nexport const PostDetails: React.FC<Props> = ({ post }) => {\n  const { id, title, body } = post;\n  const [comments, setComments] = useState<Comment[] | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [commentsLoadError, setCommentsLoadError] = useState('');\n  const [commentsDelError, setCommentsDelError] = useState<number[]>([]);\n  const [addNewComment, setAddNewComment] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n    if (commentsLoadError) {\n      setCommentsLoadError('');\n    }\n\n    if (comments) {\n      setComments(null);\n    }\n\n    if (addNewComment) {\n      setAddNewComment(false);\n    }\n\n    client.get<Comment[]>(`/comments?postId=${id}`)\n      .then(setComments)\n      .catch(() => setCommentsLoadError(\"Can't load comments for current post\"))\n      .finally(() => setLoading(false));\n  }, [post]);\n\n  const handleDeleteComment = (commentId: number) => {\n    client.delete(`/comments/${commentId}`)\n      .then(() => {\n        setComments(\n          current => current?.filter(item => item.id !== commentId) || null,\n        );\n        setCommentsDelError([]);\n      })\n      .catch(() => setCommentsDelError(current => [...current, commentId]));\n  };\n\n  const handleAddNewComment = (newComment: Comment) => {\n    setComments(current => (current ? [...current, newComment] : [newComment]));\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${id}: ${title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {body}\n          </p>\n        </div>\n\n        {loading && (\n          <Loader />\n        )}\n\n        {!loading && (\n          <div className=\"block\">\n            {commentsLoadError && (\n              <div\n                className=\"notification is-danger\"\n                data-cy=\"PostsLoadingError\"\n              >\n                {commentsLoadError}\n              </div>\n            )}\n\n            {comments && (!comments.length ? (\n              <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                No comments yet\n              </p>\n            ) : (\n              <>\n                <p className=\"title is-4\">Comments:</p>\n\n                {comments.map(comment => (\n                  <article\n                    className=\"message is-small\"\n                    data-cy=\"Comment\"\n                    key={comment.id}\n                  >\n                    <div className=\"message-header\">\n                      <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                        {comment.name}\n                      </a>\n                      <button\n                        data-cy=\"CommentDelete\"\n                        type=\"button\"\n                        className=\"delete is-small\"\n                        aria-label=\"delete\"\n                        onClick={() => handleDeleteComment(comment.id)}\n                      >\n                        delete button\n                      </button>\n                    </div>\n\n                    <div className=\"message-body\" data-cy=\"CommentBody\">\n                      {comment.body}\n                    </div>\n\n                    {commentsDelError.includes(comment.id) && (\n                      <div\n                        className=\"notification is-danger\"\n                        data-cy=\"PostsLoadingError\"\n                      >\n                        Can&apos;t delete comment. Try again later.\n                      </div>\n                    )}\n                  </article>\n                ))}\n              </>\n            ))}\n\n            {!addNewComment && !commentsLoadError && (\n              <button\n                data-cy=\"WriteCommentButton\"\n                type=\"button\"\n                className=\"button is-link\"\n                onClick={() => setAddNewComment(true)}\n              >\n                Write a comment\n              </button>\n            )}\n          </div>\n        )}\n\n        {addNewComment && (\n          <NewCommentForm post={post} onAddNewComment={handleAddNewComment} />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useRef, useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[];\n  onSetUser: (user: User) => void;\n};\n\nexport const UserSelector: React.FC<Props> = ({ users, onSetUser }) => {\n  const [dropdown, setDropdown] = useState(false);\n  const [userName, setUserName] = useState<string | null>(null);\n  const dropdownSelect = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const onClick = (event: MouseEvent) => {\n      if (dropdownSelect.current\n        && !dropdownSelect.current.contains(event.target as Node)) {\n        setDropdown(false);\n      }\n    };\n\n    document.addEventListener('mousedown', onClick);\n\n    return () => document.removeEventListener('mousedown', onClick);\n  }, []);\n\n  const handleSelectUser = (user: User) => {\n    setUserName(user.name);\n    onSetUser(user);\n    setDropdown(false);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', { 'is-active': dropdown })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setDropdown(current => !current)}\n        >\n          <span>{userName || 'Choose a user'}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div\n        className=\"dropdown-menu\"\n        ref={dropdownSelect}\n        id=\"dropdown-menu\"\n        role=\"menu\"\n      >\n        <div className=\"dropdown-content\">\n          {users.map((user, i) => (\n            <a\n              key={user.id}\n              href={`#user-${i + 1}`}\n              className={classNames(\n                'dropdown-item',\n                { 'is-active': user.name === userName },\n              )}\n              onClick={() => handleSelectUser(user)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { client } from './utils/fetchClient';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [user, setUser] = useState<User | null>(null);\n  const [posts, setPosts] = useState<Post[] | null>(null);\n  const [post, setPost] = useState<Post | null>(null);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n\n    client.get<User[]>('/users')\n      .then(setUsers)\n      .catch(() => setErrorMessage(\"Can't load list of users\"))\n      .finally(() => setLoading(false));\n  }, []);\n\n  useEffect(() => {\n    if (user) {\n      setLoading(true);\n      setPosts(null);\n      setPost(null);\n\n      if (errorMessage) {\n        setErrorMessage('');\n      }\n\n      client.get<Post[]>(`/posts?userId=${user.id}`)\n        .then(setPosts)\n        .catch(() => setErrorMessage(`Can't load posts from ${user.name}`))\n        .finally(() => setLoading(false));\n    }\n  }, [user]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  onSetUser={setUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!user && !errorMessage && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {loading && (\n                  <Loader />\n                )}\n\n                {errorMessage && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    {errorMessage}\n                  </div>\n                )}\n\n                {posts && (!posts.length ? (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                ) : (\n                  <PostsList\n                    posts={posts}\n                    onSetPost={setPost}\n                  />\n                ))}\n              </div>\n            </div>\n          </div>\n\n          {post && (\n            <div\n              data-cy=\"Sidebar\"\n              className={classNames(\n                'tile',\n                'is-parent',\n                'is-8-desktop',\n                'Sidebar',\n                'Sidebar--open',\n              )}\n            >\n              <div className=\"tile is-child box is-success \">\n                <PostDetails post={post} />\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}